#ifndef body_H
#define body_H

#include <SDL.h>
#include <SDL_image.h>
#include "Vec2.h"
#include "./shape.h"
#include "../Graphics.h"

struct Body{
	bool isColliding = false;
	////////////////////////////////////////////////////////////
	//LINEAR MOTION
	////////////////////////////////////////////////////////////
	Vec2 position;
	Vec2 velocity;
	Vec2 acceleration;

	////////////////////////////////////////////////////////////
	//ANGULAR MOTION
	////////////////////////////////////////////////////////////
	float rotation;
	float angularVelocity;
	float angularAcceleration;

	////////////////////////////////////////////////////////////
	//FORCES AND TORQUE
	////////////////////////////////////////////////////////////
	Vec2 sumForces;
	float sumTorque;

	////////////////////////////////////////////////////////////
	//MASS AND MOMENT OF INERTIA
	////////////////////////////////////////////////////////////
	float mass;
	float invMass;
	float I;
	float invI;

	////////////////////////////////////////////////////////////
	//Elasticity
	////////////////////////////////////////////////////////////
	float restitution;

	////////////////////////////////////////////////////////////
	//Friction
	////////////////////////////////////////////////////////////
	float friction;

	////////////////////////////////////////////////////////////
	//SHAPE
	////////////////////////////////////////////////////////////
	Shape* shape = nullptr;

	SDL_Texture* texture = nullptr;	

	Body(const Shape& shape,float x, float y, float mass);
	~Body();

	void SetTexture(const char* textureFileName);

	bool IsStatic() const;

	void AddForce(const Vec2& force);
	void AddTorque(float torque);
	void ClearForces();
	void ClearTorque();

	void ApplyImpulseLinear(const Vec2& j);
	void ApplyImpulseAngular(const float j);
	void ApplyImpulseAtPoint(const Vec2& j, const Vec2& r);

	void IntegrateForces(const float dt);
	void IntegrateVelocities(const float dt);

	void ApplyImpusle(const Vec2& j);

	Vec2 LocalSpaceToWorldSpace(const Vec2& point) const;
	Vec2 WorldSpaceToLocalSpace(const Vec2& point) const;
};

#endif